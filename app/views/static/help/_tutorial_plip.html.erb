<h4>Introduction</h4>
<p>
  The Protein-Ligand Interaction Profiler (PLIP) is a tool for analysis of non-covalent interactions in protein-ligand complexes.
  With a structure from the protein data bank (PDB) or a custom PDB file as an input, PLIP will detect hydrogen bonds, water bridges,
  salt bridges, halogen bonds, hydrophobic interactions, π-stacking, π-cation interactions, and metal complexes in atom-level detail.
  For more information on PLIP, see Salentin,S. et al. <i>PLIP: fully automated protein-ligand interaction profiler.
  Nucl. Acids Res. (1 July 2015) 43 (W1)</i>
</p>
<p>
  This tutorial will show you how to prepare the publicly available PLIP source code into a MAGPIE model.
  If you are unfamiliar with model creation in MAGPIE, we recommend to read to the <b>Get Started</b> tutorial first.
  After 20 minutes, you will be able to run PLIP jobs within the web framework.
  We will start off by minor preparations on the source code in
  <b><a href="help?section=<%= section %>#step1">step 1</b></a>, then
  create the MAGPIE config files in
  <b><a href="help?section=<%= section %>#step2">step 2</b></a>.
  Then, we are ready to register our model (
  <b><a href="help?section=<%= section %>#step3">step 3</b></a>) in MAGPIE and run
  jobs with the PLIP model in
  <b><a href="help?section=<%= section %>#step4">step 4</b></a>.
</p>

<div id = "step1">
  <h4>Step 1: Source code preparation</h4>
  <p>
    Download the latest <b><a href="https://github.com/ssalentin/plip/archive/stable.zip">PLIP source code</a></b>
    and unzip the file.
    Inside the unpacked folder, delete the subfolder <i>plip/test</i> since we won't need it for our tutorial.
  </p>
  <p>
    First, we will create a new file called <b>main.sh</b> with the following contents:
    <%=raw CodeRay.scan('python parse_config_and_start.py # Run PLIP
  python distances.py # Run additional visualization routine',
    :bash).div(:line_numbers => :table) %>

    This bash script will serve as the the main script for the MAGPIE system to run the model.
    It calls two python scripts, one for parsing the config files and running PLIP (<i>parse_config_and_start.py</i>),
    the second one (<i>distances.py</i>) for an additional visualization.
  </p>

  <% file1 = File.open(File.join(Rails.root, 'app', 'views', 'static', 'help', 'examplefiles', 'plip', 'pliptut1.py')).read %>
  <%=raw CodeRay.scan(file1, :python).div(:line_numbers => :table) %>

  <p>
  The second file contains a small routine to read in the XML result file generated by PLIP and extracting information on the
  distribution of binding site residue distances.
  This information will be written to a file called <i>distances.data</i>.
  </p>

  <% file2 = File.open(File.join(Rails.root, 'app', 'views', 'static', 'help', 'examplefiles', 'plip','pliptut2.py')).read %>
  <%=raw CodeRay.scan(file2, :python).div(:line_numbers => :table) %>

  <p>
  With these two scripts at hand, all that is needed are the MAGPIE config files.
  As you see, the first Python script <i>parse_config_and_start.py</i> requires two input files,
  <i>default.config</i> and <i>thresholds.config</i>.
  We will create these files in the next step.
  </p>
</div>

<div id = "step2">
  <h4>Step 2: Creation of config files</h4>
  <p>
    Create two config files called <i>default.config</i> and <i>thresholds.config</i>
    with the contents given below.
    Splitting up our parameters into two config files is not necessary, but leads to an
    automatic grouping of parameters in the input form in MAGPIE.
  </p>

  <% cfile1 = File.open(File.join(Rails.root, 'app', 'views', 'static', 'help', 'examplefiles', 'plip', 'default.config')).read %>
  <%=raw CodeRay.scan(cfile1, :bash).div(:line_numbers => :table) %>

  <% cfile2 = File.open(File.join(Rails.root, 'app', 'views', 'static', 'help', 'examplefiles', 'plip', 'thresholds.config')).read %>
  <%=raw CodeRay.scan(cfile2, :bash).div(:line_numbers => :table) %>
</div>

<div id = "step3">
  <h4>Step 3: Register your model</h4>
  <p>
    At this point, you should have two config files (<i>default.config</i> and <i>thresholds.config</i>), the two
    Python scripts for running PLIP (<i>parse_config_and_start.py</i>) and generating additional data for visualization
    (<i>distances.py</i>) as well as the main shell script <i>main.sh</i> located in root folder of your unpacked source.
    Zip all files again into a single archive.
  </p>
  <p>
    To upload our PLIP model, navigate to the model upload or use the form below.
    Fill in the required information (name and description) and upload your zipped model.
  </p>
  <div class="row">
    <div class="col-md-6 col-centered">
      <div class = "panel panel-default">
        <div class = "panel-body">
          <% @model = Model.new %>
          <% @model.name = "PLIP Tutorial Model" %>
          <% @model.description = "This model was created with help of the **MAGPIE Advanced Tutorial**" %>
          <%=
          render :layout => false, partial: 'models/form'
          %>
        </div>
      </div>
      <caption>Model Registration</caption>
    </div>
  </div>

</div>

<div id = "step4">
  <h4>Step 4: Run PLIP in the MAGPIE framework</h4>
  <p>
    With the model successfully registered, you can now create new projects and jobs.
    Navigate to <b>Projects -> New Project</b> and select your PLIP model from the selection.
    All you have to provide then is a name for your newly created project.
    When you create a new project, it will automically run your first job with the specified parameters.
    For an example of the output, see below:

  </p>
  <div class="row">
    <div class="col-md-12 col-centered">
      <div class="panel panel-default">
        <div class="panel-body">
          <% @job = Job.joins(:project).find_by(projects: {name: "Tutorial PLIP"})%>
          <%= render :partial => "jobs/running", locals: { job: @job } %>
        </div>
      </div>
      <caption>Finished job run for the PLIP model</caption><br /><br />
    </div>
</div>
</div>
